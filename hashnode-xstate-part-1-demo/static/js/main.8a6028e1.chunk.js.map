{"version":3,"sources":["acquisition-funnel/FunnelProvider.tsx","acquisition-funnel/StateRenderer.tsx","acquisition-funnel/RegistrationStep.tsx","acquisition-funnel/types.ts","acquisition-funnel/state-machine.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FunnelContext","React","createContext","FunnelProvider","stateMachine","children","useMachine","current","send","Provider","value","currentState","StateRenderer","state","useContext","matches","RegistrationStep","add_participant","additional_information","proceed_to_payment","useState","counter","setCounter","onClick","SELECT_ACTIVITY","SUBMIT_ATTENDEE","ADD_ATTENDEE","ADD_INFO","SUBMIT_ADDITIONNAL_INFORMATION","Machine","id","initial","states","activity","on","register_attendee","payment","type","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAgBMA,EAAgBC,IAAMC,cAAc,IAcnC,I,EAEQC,EAdf,YAGuD,IAFrDC,EAEoD,EAFpDA,aACAC,EACoD,EADpDA,SACoD,EAC5BC,YAAWF,GADiB,mBAC7CG,EAD6C,KACpCC,EADoC,KAEpD,OACE,cAACR,EAAcS,SAAf,CAAwBC,MAAO,CAAEC,aAAcJ,EAASC,QAAxD,SACGH,KCJQO,EAb4C,SAAC,GAGrD,IAFLC,EAEI,EAFJA,MACAR,EACI,EADJA,SACI,EDmByBS,qBAAWd,GClBhCW,EADJ,EACIA,aAAcH,EADlB,EACkBA,KAEtB,OAAOG,EAAaI,QAAQF,GAC1B,8BAAMR,EAASG,KAEf,yBCgBWQ,EA1BsD,SAAC,GAI/D,IAHLC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,uBACAC,EACI,EADJA,mBACI,EAC0BC,mBAAS,GADnC,mBACGC,EADH,KACYC,EADZ,KAGJ,OACE,gCACE,8DAAiCD,KACjC,wBACEE,QAAS,WACPD,GAAW,SAACD,GAAD,OAAaA,EAAU,KAClCJ,KAHJ,kCAQA,wBAAQM,QAASL,EAAjB,wCAGA,wBAAQK,QAASJ,EAAjB,oC,gBC5BOK,EAAkB,kBAClBC,EAAkB,kBAClBC,EAAe,eACfC,EAAW,WACXC,EAAiC,iCCKjCxB,EAAeyB,YAAQ,CAClCC,GAAI,uBACJC,QAAS,WACTC,OAAQ,CACNC,SAAU,CACRC,GAAG,eACAV,EAAkB,sBAGvBW,kBAAmB,CACjBD,IAAE,mBACCR,EAAe,qBADhB,cAECC,EAAW,0BAFZ,cAGCF,EAAkB,WAHnB,IAMJP,uBAAwB,CACtBgB,GAAG,eACAN,EAAiC,YAGtCQ,QAAS,CACPC,KAAM,Y,MC4BGC,MA7Cf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,EAAD,CAAgBnC,aAAcA,EAA9B,UACE,cAAC,EAAD,CAAeS,MAAM,WAArB,SACG,SAACL,GACA,OACE,gCACE,+CACA,wBAAQe,QAAS,kBAAMf,EAAKgB,IAA5B,wBAKR,cAAC,EAAD,CAAeX,MAAM,oBAArB,SACG,SAACL,GAAD,OACC,cAAC,EAAD,CACES,gBAAiB,kBAAMT,EAAKkB,IAC5BR,uBAAwB,kBAAMV,EAAKmB,IACnCR,mBAAoB,kBAAMX,EAAKiB,SAIrC,cAAC,EAAD,CAAeZ,MAAM,yBAArB,SACG,SAACL,GACA,OACE,gCACE,wDACA,wBAAQe,QAAS,kBAAMf,EAAKoB,IAA5B,wBAOR,cAAC,EAAD,CAAef,MAAM,UAArB,SACG,WACC,OAAO,kDCrCJ2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a6028e1.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { StateMachine, State } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\n\n// We use a generic type to be able to handle\n// any shape of context with type checking\ninterface FunnelProviderProps<TContext> {\n  stateMachine: StateMachine<TContext, any, any>;\n  children: React.ReactNode;\n}\n\ninterface FunnelContextValue {\n  currentState: State<any>;\n  send: (state: string) => void;\n}\n\nconst FunnelContext = React.createContext({} as FunnelContextValue);\n\nfunction FunnelProvider<TContext>({\n  stateMachine,\n  children,\n}: FunnelProviderProps<TContext>): React.ReactElement {\n  const [current, send] = useMachine(stateMachine);\n  return (\n    <FunnelContext.Provider value={{ currentState: current, send }}>\n      {children}\n    </FunnelContext.Provider>\n  );\n}\n\nexport const useFunnel = () => useContext(FunnelContext);\n\nexport default FunnelProvider;\n","import React from \"react\";\nimport { useFunnel } from \"./FunnelProvider\";\n\ninterface StateProps {\n  state: string;\n  children: (send: any) => React.ReactNode;\n}\n\nconst StateRenderer: React.FunctionComponent<StateProps> = ({\n  state,\n  children,\n}) => {\n  const { currentState, send } = useFunnel();\n\n  return currentState.matches(state) ? (\n    <div>{children(send)}</div>\n  ) : (\n    <div></div>\n  );\n};\n\nexport default StateRenderer;\n","import React, { useState } from \"react\";\n\ninterface RegistrationProps {\n  add_participant: () => void;\n  additional_information: () => void;\n  proceed_to_payment: () => void;\n}\nconst RegistrationStep: React.FunctionComponent<RegistrationProps> = ({\n  add_participant,\n  additional_information,\n  proceed_to_payment,\n}) => {\n  const [counter, setCounter] = useState(1);\n\n  return (\n    <div>\n      <h2>Register participant number {counter}</h2>\n      <button\n        onClick={() => {\n          setCounter((counter) => counter + 1);\n          add_participant();\n        }}\n      >\n        Continue registering\n      </button>\n      <button onClick={additional_information}>\n        Add additional information\n      </button>\n      <button onClick={proceed_to_payment}>Proceed to Payment</button>\n    </div>\n  );\n};\n\nexport default RegistrationStep;\n","export const SELECT_ACTIVITY = \"SELECT_ACTIVITY\";\nexport const SUBMIT_ATTENDEE = \"SUBMIT_ATTENDEE\";\nexport const ADD_ATTENDEE = \"ADD_ATTENDEE\";\nexport const ADD_INFO = \"ADD_INFO\";\nexport const SUBMIT_ADDITIONNAL_INFORMATION = \"SUBMIT_ADDITIONNAL_INFORMATION\";\n","import { Machine } from \"xstate\";\nimport {\n  SELECT_ACTIVITY,\n  SUBMIT_ATTENDEE,\n  ADD_ATTENDEE,\n  ADD_INFO,\n  SUBMIT_ADDITIONNAL_INFORMATION,\n} from \"./types\";\n\nexport const stateMachine = Machine({\n  id: \"funnel-state-machine\",\n  initial: \"activity\",\n  states: {\n    activity: {\n      on: {\n        [SELECT_ACTIVITY]: \"register_attendee\",\n      },\n    },\n    register_attendee: {\n      on: {\n        [ADD_ATTENDEE]: \"register_attendee\",\n        [ADD_INFO]: \"additional_information\",\n        [SUBMIT_ATTENDEE]: \"payment\",\n      },\n    },\n    additional_information: {\n      on: {\n        [SUBMIT_ADDITIONNAL_INFORMATION]: \"payment\",\n      },\n    },\n    payment: {\n      type: \"final\",\n    },\n  },\n});\n\nexport default stateMachine;\n","import React from \"react\";\nimport FunnelProvider from \"./acquisition-funnel/FunnelProvider\";\nimport StateRenderer from \"./acquisition-funnel/StateRenderer\";\nimport RegistrationStep from \"./acquisition-funnel/RegistrationStep\";\nimport { stateMachine } from \"./acquisition-funnel/state-machine\";\nimport {\n  SELECT_ACTIVITY,\n  SUBMIT_ATTENDEE,\n  ADD_ATTENDEE,\n  ADD_INFO,\n  SUBMIT_ADDITIONNAL_INFORMATION,\n} from \"./acquisition-funnel/types\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FunnelProvider stateMachine={stateMachine}>\n        <StateRenderer state=\"activity\">\n          {(send) => {\n            return (\n              <div>\n                <h2>Activity Step</h2>\n                <button onClick={() => send(SELECT_ACTIVITY)}>next</button>\n              </div>\n            );\n          }}\n        </StateRenderer>\n        <StateRenderer state=\"register_attendee\">\n          {(send) => (\n            <RegistrationStep\n              add_participant={() => send(ADD_ATTENDEE)}\n              additional_information={() => send(ADD_INFO)}\n              proceed_to_payment={() => send(SUBMIT_ATTENDEE)}\n            />\n          )}\n        </StateRenderer>\n        <StateRenderer state=\"additional_information\">\n          {(send) => {\n            return (\n              <div>\n                <h2>Additional information</h2>\n                <button onClick={() => send(SUBMIT_ADDITIONNAL_INFORMATION)}>\n                  next\n                </button>\n              </div>\n            );\n          }}\n        </StateRenderer>\n        <StateRenderer state=\"payment\">\n          {() => {\n            return <h2>payment</h2>;\n          }}\n        </StateRenderer>\n      </FunnelProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}