{"version":3,"sources":["acquisition-funnel/FunnelProvider.tsx","acquisition-funnel/StateRenderer.tsx","acquisition-funnel/types.ts","acquisition-funnel/steps/ActivityStep.tsx","acquisition-funnel/steps/AttendeeStep.tsx","acquisition-funnel/steps/AdditionalInfomationStep.tsx","acquisition-funnel/state-machine.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FunnelContext","React","createContext","FunnelProvider","stateMachine","children","useMachine","current","send","console","log","context","Provider","value","currentState","activity","attendees","length","map","member","name","surname","additional_information","StateRenderer","state","useContext","matches","SELECT_ACTIVITY","SUBMIT_ADDITIONNAL_INFORMATION","ActivityStep","onSubmit","values","initialValues","type","style","marginTop","AttendeeStep","addAttendee","proceedToPayment","addInfo","resetForm","onClick","AdditionalInformationStep","additionalInformation","Machine","id","initial","undefined","payment","states","on","exit","register_attendee","ADD_ATTENDEE","ADD_INFO","SUBMIT_ATTENDEE","actions","setActivity","assign","event","data","addattendee","concat","setAdditionalInformation","App","className","attendee","info","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55458dab.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { StateMachine, State } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\n\n// We use a generic type to be able to handle\n// any shape of context with type checking\ninterface FunnelProviderProps<TContext> {\n  stateMachine: StateMachine<TContext, any, any>;\n  children: React.ReactNode;\n}\n\ninterface FunnelContextValue {\n  currentState: State<any>;\n  send: (state: string) => void;\n}\n\nconst FunnelContext = React.createContext({} as FunnelContextValue);\n\nfunction FunnelProvider({\n  stateMachine,\n  children,\n}: FunnelProviderProps<any>): React.ReactElement {\n  const [current, send] = useMachine(stateMachine);\n  console.log(current.context);\n  return (\n    <FunnelContext.Provider value={{ currentState: current, send }}>\n      <div>\n        <h2> Current Context </h2>\n        <h3> Chosen Activity</h3>\n        <p> {current.context.activity ?? \"Not picked yet\"}</p>\n        <h3> List of attendees </h3>\n        <div>\n          {current.context.attendees.length > 0\n            ? current.context.attendees.map((member: any) => (\n                <p key={member.name}>{`${member.name} ${member.surname}`}</p>\n              ))\n            : \"No attendee added yet\"}\n        </div>\n        <h3> Additional Information </h3>\n        <p>\n          {current.context.additional_information ?? \"No additional info yet\"}\n        </p>\n      </div>\n      <hr />\n      {children}\n    </FunnelContext.Provider>\n  );\n}\n\nexport const useFunnel = () => useContext(FunnelContext);\n\nexport default FunnelProvider;\n","import React from \"react\";\nimport { useFunnel } from \"./FunnelProvider\";\n\ninterface StateProps {\n  state: string;\n  children: (send: any) => React.ReactNode;\n}\n\nconst StateRenderer: React.FunctionComponent<StateProps> = ({\n  state,\n  children,\n}) => {\n  const { currentState, send } = useFunnel();\n\n  return currentState.matches(state) ? (\n    <div>{children(send)}</div>\n  ) : (\n    <div></div>\n  );\n};\n\nexport default StateRenderer;\n","export const ESCAPE_GAME = \"escape-game\";\nexport const BOWLING = \"bowling\";\n\nexport interface Attendee {\n  name: string;\n  surname: string;\n}\n\nexport type Activity = typeof ESCAPE_GAME | typeof BOWLING;\n\nexport interface FunnelData {\n  activity?: Activity;\n  attendees: Attendee[];\n  additional_information?: string;\n  payment?: number;\n}\n\nexport const SELECT_ACTIVITY = \"SELECT_ACTIVITY\";\nexport const SUBMIT_ATTENDEE = \"SUBMIT_ATTENDEE\";\nexport const ADD_ATTENDEE = \"ADD_ATTENDEE\";\nexport const ADD_INFO = \"ADD_INFO\";\nexport const SUBMIT_ADDITIONNAL_INFORMATION = \"SUBMIT_ADDITIONNAL_INFORMATION\";\n","import React from \"react\";\nimport { Activity, ESCAPE_GAME, BOWLING } from \"../types\";\nimport { Form, Field, ErrorMessage, Formik } from \"formik\";\n\ninterface ActivityStepProps {\n  onSubmit: (activity: Activity | \"\") => void;\n}\n\ninterface FormValues {\n  activity: Activity | \"\";\n}\n\nconst ActivityStep: React.FunctionComponent<ActivityStepProps> = ({\n  onSubmit,\n}) => {\n  return (\n    <Formik\n      onSubmit={(values: FormValues) => onSubmit(values.activity)}\n      initialValues={{ activity: \"\" }}\n    >\n      <Form>\n        <h2>Pick an activity </h2>\n        <ErrorMessage name=\"activity\" />\n        <label>\n          <Field name=\"activity\" type=\"radio\" value={ESCAPE_GAME} />\n          Escape Game\n        </label>\n        <label>\n          <Field name=\"activity\" type=\"radio\" value={BOWLING} />\n          Bowling\n        </label>\n        <div style={{ marginTop: \"8px\" }}>\n          <button type=\"submit\"> Next </button>\n        </div>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ActivityStep;\n","import React from \"react\";\nimport { Attendee } from \"../types\";\nimport { Field, ErrorMessage, Formik } from \"formik\";\n\ninterface AttendeeStepProps {\n  addAttendee: (attendee: Attendee) => void;\n  proceedToPayment: (attendee: Attendee) => void;\n  addInfo: (attendee: Attendee) => void;\n}\n\nconst AttendeeStep: React.FunctionComponent<AttendeeStepProps> = ({\n  addAttendee,\n  proceedToPayment,\n  addInfo,\n}) => {\n  return (\n    <Formik\n      onSubmit={(values) => {\n        proceedToPayment(values);\n      }}\n      initialValues={{\n        name: \"\",\n        surname: \"\",\n      }}\n    >\n      {({ values, resetForm }) => (\n        <div>\n          <h2>Pick an activity </h2>\n          <ErrorMessage name=\"activity\" />\n          <label>\n            <Field name=\"name\" />\n            Name\n          </label>\n          <label>\n            <Field name=\"surname\" />\n            Surname\n          </label>\n          <div>\n            <button\n              onClick={() => {\n                addAttendee(values);\n                resetForm();\n              }}\n            >\n              Submit and add another\n            </button>\n            <button\n              onClick={() => {\n                proceedToPayment(values);\n              }}\n            >\n              Proceed to payment\n            </button>\n            <button\n              onClick={() => {\n                addInfo(values);\n              }}\n            >\n              Enter additional information\n            </button>\n          </div>\n        </div>\n      )}\n    </Formik>\n  );\n};\n\nexport default AttendeeStep;\n","import React from \"react\";\nimport { Form, Field, ErrorMessage, Formik } from \"formik\";\n\ninterface AdditionalInformationStepProps {\n  onSubmit: (activity: string) => void;\n}\n\ninterface FormValues {\n  additionalInformation: string;\n}\n\nconst AdditionalInformationStep: React.FunctionComponent<AdditionalInformationStepProps> =\n  ({ onSubmit }) => {\n    return (\n      <Formik\n        onSubmit={(values: FormValues) =>\n          onSubmit(values.additionalInformation)\n        }\n        initialValues={{ additionalInformation: \"\" }}\n      >\n        <Form>\n          <h2>Enter additional information</h2>\n          <ErrorMessage name=\"additionalInformation\" />\n          <label>\n            <Field name=\"additionalInformation\" />\n          </label>\n          <button type=\"submit\"> Proceed to Payment </button>\n        </Form>\n      </Formik>\n    );\n  };\n\nexport default AdditionalInformationStep;\n","import { Machine, assign } from \"xstate\";\nimport {\n  Attendee,\n  Activity,\n  FunnelData,\n  SELECT_ACTIVITY,\n  SUBMIT_ATTENDEE,\n  ADD_ATTENDEE,\n  ADD_INFO,\n  SUBMIT_ADDITIONNAL_INFORMATION,\n} from \"./types\";\n\ntype AttendeeEvent = {\n  type: typeof SUBMIT_ATTENDEE | typeof ADD_ATTENDEE | typeof ADD_INFO;\n  data: Attendee;\n};\ntype ActivityEvent = {\n  type: typeof SELECT_ACTIVITY;\n  data: Activity;\n};\ntype AdditionalInformationEvent = {\n  type: typeof SUBMIT_ADDITIONNAL_INFORMATION;\n  data: string;\n};\n\ntype FunnelEvent = AttendeeEvent | ActivityEvent | AdditionalInformationEvent;\n\nconst setActivity = (context: FunnelData, event: FunnelEvent) => {\n  if (event.type !== SELECT_ACTIVITY) {\n    return context;\n  }\n  return {\n    ...context,\n    activity: event.data,\n  };\n};\n\nconst addAttendee = (context: FunnelData, event: FunnelEvent) => {\n  switch (event.type) {\n    case ADD_ATTENDEE:\n      return {\n        context,\n        attendees: context.attendees.concat(event.data),\n      };\n    case SUBMIT_ATTENDEE:\n      return {\n        context,\n        attendees: context.attendees.concat(event.data),\n      };\n    case ADD_INFO:\n      return {\n        context,\n        attendees: context.attendees.concat(event.data),\n      };\n    default:\n      return context;\n  }\n};\n\nconst setAddtionalInformation = (context: FunnelData, event: FunnelEvent) => {\n  if (event.type !== SUBMIT_ADDITIONNAL_INFORMATION) {\n    return context;\n  }\n  return {\n    ...context,\n    additional_information: event.data,\n  };\n};\n\nexport const stateMachine = Machine<FunnelData, FunnelEvent>(\n  {\n    id: \"funnel-state-machine\",\n    initial: \"activity\",\n    context: {\n      activity: undefined,\n      attendees: [],\n      additional_information: undefined,\n      payment: undefined,\n    },\n    states: {\n      activity: {\n        on: {\n          SELECT_ACTIVITY: \"register_attendee\",\n        },\n        exit: [\"setActivity\"],\n      },\n      register_attendee: {\n        on: {\n          ADD_ATTENDEE: \"register_attendee\",\n          ADD_INFO: \"additional_information\",\n          SUBMIT_ATTENDEE: \"payment\",\n        },\n        exit: [\"addattendee\"],\n      },\n      additional_information: {\n        on: {\n          SUBMIT_ADDITIONNAL_INFORMATION: \"payment\",\n        },\n        exit: [\"setAdditionalInformation\"],\n      },\n      payment: {\n        type: \"final\",\n      },\n    },\n  },\n  {\n    actions: {\n      setActivity: assign(setActivity),\n      addattendee: assign(addAttendee),\n      setAdditionalInformation: assign(setAddtionalInformation),\n    },\n  }\n);\n\nexport default stateMachine;\n","import React from \"react\";\nimport FunnelProvider from \"./acquisition-funnel/FunnelProvider\";\nimport StateRenderer from \"./acquisition-funnel/StateRenderer\";\nimport ActivityStep from \"./acquisition-funnel/steps/ActivityStep\";\nimport AttendeeStep from \"./acquisition-funnel/steps/AttendeeStep\";\nimport AdditionnalInformationStep from \"./acquisition-funnel/steps/AdditionalInfomationStep\";\nimport { stateMachine } from \"./acquisition-funnel/state-machine\";\nimport {\n  SELECT_ACTIVITY,\n  SUBMIT_ADDITIONNAL_INFORMATION,\n} from \"./acquisition-funnel/types\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FunnelProvider stateMachine={stateMachine}>\n        <StateRenderer state=\"activity\">\n          {(send) => (\n            <ActivityStep\n              onSubmit={(activity) => {\n                send({\n                  type: SELECT_ACTIVITY,\n                  data: activity,\n                });\n              }}\n            />\n          )}\n        </StateRenderer>\n        <StateRenderer state=\"register_attendee\">\n          {(send) => (\n            <AttendeeStep\n              addAttendee={(attendee) =>\n                send({ type: \"ADD_ATTENDEE\", data: attendee })\n              }\n              addInfo={(attendee) => send({ type: \"ADD_INFO\", data: attendee })}\n              proceedToPayment={(attendee) =>\n                send({ type: \"SUBMIT_ATTENDEE\", data: attendee })\n              }\n            />\n          )}\n        </StateRenderer>\n        <StateRenderer state=\"additional_information\">\n          {(send) => (\n            <AdditionnalInformationStep\n              onSubmit={(info) =>\n                send({\n                  type: SUBMIT_ADDITIONNAL_INFORMATION,\n                  data: info,\n                })\n              }\n            />\n          )}\n        </StateRenderer>\n        <StateRenderer state=\"payment\">\n          {() => {\n            return <h2>payment</h2>;\n          }}\n        </StateRenderer>\n      </FunnelProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}